// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: aua/aua.proto

/*
Package aua is a generated protocol buffer package.

It is generated from these files:
	aua/aua.proto
	aua/enum.proto

It has these top-level messages:
	GetAccountReq
	GetAccountRsp
	ApplyIssueRsp
	CancleExchangeGoldReq
	ApplyContractReq
	ApplyExchangeGoldReq
	ApplyWithdrawReq
	UserShortInfo
	PageApplyContractReq
	PageApplyExchangeGoldReq
	PageApplyContractRsp
	PageApplyExchangeGoldRsp
	ApplyRansomReq
	ConfirmApplyContractReq
	ConfirmExchangeGoldReq
	ConfirmRansomReceiptReq
	ConfirmDeliveryReq
	TransferProgressReq
	ApplyRansomRsp
	ApplyContractRsp
	ConfirmApplyContractRsp
	AddReceiptReq
	AddReceiptRsp
	UpdateReceiptReq
	ApplyIssueReq
	PageApplicationReq
	PageApplicationRsp
	UpdateEOSAccountReq
	BindEOSAccountReq
	SendApplyNumReq
	ReviewApplicationReq
	PageContractReq
	PageContractRsp
	GetContractInfoReq
	GetContractInfoRsp
	PageReceiptReq
	PageReceiptRsp
	Application
	Receipt
	TransferProgressRsp
	Contract
	ReceiptAddress
	ClientIdentify
	CreateAndBindEOSAccountReq
	PageCurrencyRsp
	PageCurrencyReq
	Currency
	PageBankReq
	PageBankRsp
	Bank
	CreateCurrencyReq
	CreateBankReq
	Store
	CreateStoreReq
	PageStoreReq
	PageStoreRsp
	GoldRecord
	PageRebalancedRecordRsp
	PageRebalancedRecordRep
	GetAvailableIssueAmountRsp
	ReviewedWithdrawReq
	UpdateReceiptImagesReq
	GetWithdrawableAmountRsp
*/
package aua

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.bull-b.com/aua/aua-proto/common"
import _ "gitlab.bull-b.com/aua/aua-proto/wallet"
import _ "gitlab.bull-b.com/aua/aua-proto/user"
import _ "gitlab.bull-b.com/aua/aua-proto/user"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AUA service

type AUAService interface {
	// 申请列表
	PageApplication(ctx context.Context, in *PageApplicationReq, opts ...client.CallOption) (*PageApplicationRsp, error)
	// PageDepositApplication
	PageDepositApplication(ctx context.Context, in *PageApplicationReq, opts ...client.CallOption) (*PageApplicationRsp, error)
	// PageWithdrawApplication
	PageWithdrawApplication(ctx context.Context, in *PageApplicationReq, opts ...client.CallOption) (*PageApplicationRsp, error)
	// 绑定/修改EOS
	BindEOSAccount(ctx context.Context, in *BindEOSAccountReq, opts ...client.CallOption) (*common.Empty, error)
	// 获取账户数据
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...client.CallOption) (*GetAccountRsp, error)
	// 发送申请数据
	SendApplyNumEmail(ctx context.Context, in *SendApplyNumReq, opts ...client.CallOption) (*common.Empty, error)
	// 添加收据
	AddReceipt(ctx context.Context, in *AddReceiptReq, opts ...client.CallOption) (*AddReceiptRsp, error)
	// 更新收据
	UpdateReceipt(ctx context.Context, in *UpdateReceiptReq, opts ...client.CallOption) (*AddReceiptRsp, error)
	// 申请发币
	ApplyIssue(ctx context.Context, in *ApplyIssueReq, opts ...client.CallOption) (*ApplyIssueRsp, error)
	// 审核申请
	ReviewApplication(ctx context.Context, in *ReviewApplicationReq, opts ...client.CallOption) (*common.Empty, error)
	// 审核申请
	ReviewDepositApplication(ctx context.Context, in *ReviewApplicationReq, opts ...client.CallOption) (*common.Empty, error)
	// 审核申请
	ReviewWithdrawApplication(ctx context.Context, in *ReviewApplicationReq, opts ...client.CallOption) (*common.Empty, error)
	// 合约列表
	PageContract(ctx context.Context, in *PageContractReq, opts ...client.CallOption) (*PageContractRsp, error)
	// 获取合约详情
	GetContract(ctx context.Context, in *GetContractInfoReq, opts ...client.CallOption) (*GetContractInfoRsp, error)
	// 收据列表
	PageReceipt(ctx context.Context, in *PageReceiptReq, opts ...client.CallOption) (*PageReceiptRsp, error)
	// ApplyWithdraw
	ApplyWithdraw(ctx context.Context, in *ApplyWithdrawReq, opts ...client.CallOption) (*Application, error)
	// 申请合约
	ApplyContract(ctx context.Context, in *ApplyContractReq, opts ...client.CallOption) (*Application, error)
	// 申请兑换黄金
	ApplyExchangeGold(ctx context.Context, in *ApplyExchangeGoldReq, opts ...client.CallOption) (*Application, error)
	// 申请赎回凭证
	ApplyRansom(ctx context.Context, in *ApplyRansomReq, opts ...client.CallOption) (*ApplyRansomRsp, error)
	// 确认赎回凭证
	ConfirmRansomReceipt(ctx context.Context, in *ConfirmRansomReceiptReq, opts ...client.CallOption) (*Contract, error)
	// 确认申请合约
	ConfirmApplyContract(ctx context.Context, in *ConfirmApplyContractReq, opts ...client.CallOption) (*ConfirmApplyContractRsp, error)
	// 确认申请合约
	ConfirmExchangeGold(ctx context.Context, in *ConfirmExchangeGoldReq, opts ...client.CallOption) (*Contract, error)
	// 转账进度
	GetTransferProgress(ctx context.Context, in *TransferProgressReq, opts ...client.CallOption) (*TransferProgressRsp, error)
	// 合约申请列表
	PageApplyContract(ctx context.Context, in *PageApplyContractReq, opts ...client.CallOption) (*PageApplyContractRsp, error)
	// 兑换黄金列表
	PageApplyExchangeGold(ctx context.Context, in *PageApplyExchangeGoldReq, opts ...client.CallOption) (*PageApplyExchangeGoldRsp, error)
	// 确认交付
	ConfirmDelivery(ctx context.Context, in *ConfirmDeliveryReq, opts ...client.CallOption) (*common.Empty, error)
	// 取消兑换黄金
	CancleExchangeGold(ctx context.Context, in *CancleExchangeGoldReq, opts ...client.CallOption) (*common.Empty, error)
	// 取消兑换黄金
	CreateAndBindEOSAccount(ctx context.Context, in *CreateAndBindEOSAccountReq, opts ...client.CallOption) (*common.Empty, error)
	// PageCurrency
	PageCurrency(ctx context.Context, in *PageCurrencyReq, opts ...client.CallOption) (*PageCurrencyRsp, error)
	// PageBank
	PageBank(ctx context.Context, in *PageBankReq, opts ...client.CallOption) (*PageBankRsp, error)
	// PageStore
	PageStore(ctx context.Context, in *PageStoreReq, opts ...client.CallOption) (*PageStoreRsp, error)
	// CreateBank
	CreateBank(ctx context.Context, in *CreateBankReq, opts ...client.CallOption) (*Bank, error)
	// CreateCurrency
	CreateCurrency(ctx context.Context, in *CreateCurrencyReq, opts ...client.CallOption) (*Currency, error)
	// CreatStore
	CreateStore(ctx context.Context, in *CreateStoreReq, opts ...client.CallOption) (*Store, error)
	// GetRebalancedRecord
	PageRebalancedRecord(ctx context.Context, in *PageRebalancedRecordRep, opts ...client.CallOption) (*PageRebalancedRecordRsp, error)
	// GetAvailableIssueAmount
	GetAvailableIssueAmount(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetAvailableIssueAmountRsp, error)
	// ReviewedWithdrawAmount
	ReviewedWithdrawAmount(ctx context.Context, in *ReviewedWithdrawReq, opts ...client.CallOption) (*common.Empty, error)
	// UpdateReceiptImages ...
	UpdateReceiptImages(ctx context.Context, in *UpdateReceiptImagesReq, opts ...client.CallOption) (*common.Empty, error)
	// GetWithdrawableAmount ...
	GetWithdrawableAmount(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetWithdrawableAmountRsp, error)
}

type aUAService struct {
	c    client.Client
	name string
}

func NewAUAService(name string, c client.Client) AUAService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "aua"
	}
	return &aUAService{
		c:    c,
		name: name,
	}
}

func (c *aUAService) PageApplication(ctx context.Context, in *PageApplicationReq, opts ...client.CallOption) (*PageApplicationRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageApplication", in)
	out := new(PageApplicationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageDepositApplication(ctx context.Context, in *PageApplicationReq, opts ...client.CallOption) (*PageApplicationRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageDepositApplication", in)
	out := new(PageApplicationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageWithdrawApplication(ctx context.Context, in *PageApplicationReq, opts ...client.CallOption) (*PageApplicationRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageWithdrawApplication", in)
	out := new(PageApplicationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) BindEOSAccount(ctx context.Context, in *BindEOSAccountReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.BindEOSAccount", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) GetAccount(ctx context.Context, in *GetAccountReq, opts ...client.CallOption) (*GetAccountRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.GetAccount", in)
	out := new(GetAccountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) SendApplyNumEmail(ctx context.Context, in *SendApplyNumReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.SendApplyNumEmail", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) AddReceipt(ctx context.Context, in *AddReceiptReq, opts ...client.CallOption) (*AddReceiptRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.AddReceipt", in)
	out := new(AddReceiptRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) UpdateReceipt(ctx context.Context, in *UpdateReceiptReq, opts ...client.CallOption) (*AddReceiptRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.UpdateReceipt", in)
	out := new(AddReceiptRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ApplyIssue(ctx context.Context, in *ApplyIssueReq, opts ...client.CallOption) (*ApplyIssueRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.ApplyIssue", in)
	out := new(ApplyIssueRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ReviewApplication(ctx context.Context, in *ReviewApplicationReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.ReviewApplication", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ReviewDepositApplication(ctx context.Context, in *ReviewApplicationReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.ReviewDepositApplication", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ReviewWithdrawApplication(ctx context.Context, in *ReviewApplicationReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.ReviewWithdrawApplication", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageContract(ctx context.Context, in *PageContractReq, opts ...client.CallOption) (*PageContractRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageContract", in)
	out := new(PageContractRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) GetContract(ctx context.Context, in *GetContractInfoReq, opts ...client.CallOption) (*GetContractInfoRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.GetContract", in)
	out := new(GetContractInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageReceipt(ctx context.Context, in *PageReceiptReq, opts ...client.CallOption) (*PageReceiptRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageReceipt", in)
	out := new(PageReceiptRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ApplyWithdraw(ctx context.Context, in *ApplyWithdrawReq, opts ...client.CallOption) (*Application, error) {
	req := c.c.NewRequest(c.name, "AUA.ApplyWithdraw", in)
	out := new(Application)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ApplyContract(ctx context.Context, in *ApplyContractReq, opts ...client.CallOption) (*Application, error) {
	req := c.c.NewRequest(c.name, "AUA.ApplyContract", in)
	out := new(Application)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ApplyExchangeGold(ctx context.Context, in *ApplyExchangeGoldReq, opts ...client.CallOption) (*Application, error) {
	req := c.c.NewRequest(c.name, "AUA.ApplyExchangeGold", in)
	out := new(Application)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ApplyRansom(ctx context.Context, in *ApplyRansomReq, opts ...client.CallOption) (*ApplyRansomRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.ApplyRansom", in)
	out := new(ApplyRansomRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ConfirmRansomReceipt(ctx context.Context, in *ConfirmRansomReceiptReq, opts ...client.CallOption) (*Contract, error) {
	req := c.c.NewRequest(c.name, "AUA.ConfirmRansomReceipt", in)
	out := new(Contract)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ConfirmApplyContract(ctx context.Context, in *ConfirmApplyContractReq, opts ...client.CallOption) (*ConfirmApplyContractRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.ConfirmApplyContract", in)
	out := new(ConfirmApplyContractRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ConfirmExchangeGold(ctx context.Context, in *ConfirmExchangeGoldReq, opts ...client.CallOption) (*Contract, error) {
	req := c.c.NewRequest(c.name, "AUA.ConfirmExchangeGold", in)
	out := new(Contract)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) GetTransferProgress(ctx context.Context, in *TransferProgressReq, opts ...client.CallOption) (*TransferProgressRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.GetTransferProgress", in)
	out := new(TransferProgressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageApplyContract(ctx context.Context, in *PageApplyContractReq, opts ...client.CallOption) (*PageApplyContractRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageApplyContract", in)
	out := new(PageApplyContractRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageApplyExchangeGold(ctx context.Context, in *PageApplyExchangeGoldReq, opts ...client.CallOption) (*PageApplyExchangeGoldRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageApplyExchangeGold", in)
	out := new(PageApplyExchangeGoldRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ConfirmDelivery(ctx context.Context, in *ConfirmDeliveryReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.ConfirmDelivery", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) CancleExchangeGold(ctx context.Context, in *CancleExchangeGoldReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.CancleExchangeGold", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) CreateAndBindEOSAccount(ctx context.Context, in *CreateAndBindEOSAccountReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.CreateAndBindEOSAccount", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageCurrency(ctx context.Context, in *PageCurrencyReq, opts ...client.CallOption) (*PageCurrencyRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageCurrency", in)
	out := new(PageCurrencyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageBank(ctx context.Context, in *PageBankReq, opts ...client.CallOption) (*PageBankRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageBank", in)
	out := new(PageBankRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageStore(ctx context.Context, in *PageStoreReq, opts ...client.CallOption) (*PageStoreRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageStore", in)
	out := new(PageStoreRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) CreateBank(ctx context.Context, in *CreateBankReq, opts ...client.CallOption) (*Bank, error) {
	req := c.c.NewRequest(c.name, "AUA.CreateBank", in)
	out := new(Bank)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) CreateCurrency(ctx context.Context, in *CreateCurrencyReq, opts ...client.CallOption) (*Currency, error) {
	req := c.c.NewRequest(c.name, "AUA.CreateCurrency", in)
	out := new(Currency)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) CreateStore(ctx context.Context, in *CreateStoreReq, opts ...client.CallOption) (*Store, error) {
	req := c.c.NewRequest(c.name, "AUA.CreateStore", in)
	out := new(Store)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) PageRebalancedRecord(ctx context.Context, in *PageRebalancedRecordRep, opts ...client.CallOption) (*PageRebalancedRecordRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.PageRebalancedRecord", in)
	out := new(PageRebalancedRecordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) GetAvailableIssueAmount(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetAvailableIssueAmountRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.GetAvailableIssueAmount", in)
	out := new(GetAvailableIssueAmountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) ReviewedWithdrawAmount(ctx context.Context, in *ReviewedWithdrawReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.ReviewedWithdrawAmount", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) UpdateReceiptImages(ctx context.Context, in *UpdateReceiptImagesReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "AUA.UpdateReceiptImages", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aUAService) GetWithdrawableAmount(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetWithdrawableAmountRsp, error) {
	req := c.c.NewRequest(c.name, "AUA.GetWithdrawableAmount", in)
	out := new(GetWithdrawableAmountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AUA service

type AUAHandler interface {
	// 申请列表
	PageApplication(context.Context, *PageApplicationReq, *PageApplicationRsp) error
	// PageDepositApplication
	PageDepositApplication(context.Context, *PageApplicationReq, *PageApplicationRsp) error
	// PageWithdrawApplication
	PageWithdrawApplication(context.Context, *PageApplicationReq, *PageApplicationRsp) error
	// 绑定/修改EOS
	BindEOSAccount(context.Context, *BindEOSAccountReq, *common.Empty) error
	// 获取账户数据
	GetAccount(context.Context, *GetAccountReq, *GetAccountRsp) error
	// 发送申请数据
	SendApplyNumEmail(context.Context, *SendApplyNumReq, *common.Empty) error
	// 添加收据
	AddReceipt(context.Context, *AddReceiptReq, *AddReceiptRsp) error
	// 更新收据
	UpdateReceipt(context.Context, *UpdateReceiptReq, *AddReceiptRsp) error
	// 申请发币
	ApplyIssue(context.Context, *ApplyIssueReq, *ApplyIssueRsp) error
	// 审核申请
	ReviewApplication(context.Context, *ReviewApplicationReq, *common.Empty) error
	// 审核申请
	ReviewDepositApplication(context.Context, *ReviewApplicationReq, *common.Empty) error
	// 审核申请
	ReviewWithdrawApplication(context.Context, *ReviewApplicationReq, *common.Empty) error
	// 合约列表
	PageContract(context.Context, *PageContractReq, *PageContractRsp) error
	// 获取合约详情
	GetContract(context.Context, *GetContractInfoReq, *GetContractInfoRsp) error
	// 收据列表
	PageReceipt(context.Context, *PageReceiptReq, *PageReceiptRsp) error
	// ApplyWithdraw
	ApplyWithdraw(context.Context, *ApplyWithdrawReq, *Application) error
	// 申请合约
	ApplyContract(context.Context, *ApplyContractReq, *Application) error
	// 申请兑换黄金
	ApplyExchangeGold(context.Context, *ApplyExchangeGoldReq, *Application) error
	// 申请赎回凭证
	ApplyRansom(context.Context, *ApplyRansomReq, *ApplyRansomRsp) error
	// 确认赎回凭证
	ConfirmRansomReceipt(context.Context, *ConfirmRansomReceiptReq, *Contract) error
	// 确认申请合约
	ConfirmApplyContract(context.Context, *ConfirmApplyContractReq, *ConfirmApplyContractRsp) error
	// 确认申请合约
	ConfirmExchangeGold(context.Context, *ConfirmExchangeGoldReq, *Contract) error
	// 转账进度
	GetTransferProgress(context.Context, *TransferProgressReq, *TransferProgressRsp) error
	// 合约申请列表
	PageApplyContract(context.Context, *PageApplyContractReq, *PageApplyContractRsp) error
	// 兑换黄金列表
	PageApplyExchangeGold(context.Context, *PageApplyExchangeGoldReq, *PageApplyExchangeGoldRsp) error
	// 确认交付
	ConfirmDelivery(context.Context, *ConfirmDeliveryReq, *common.Empty) error
	// 取消兑换黄金
	CancleExchangeGold(context.Context, *CancleExchangeGoldReq, *common.Empty) error
	// 取消兑换黄金
	CreateAndBindEOSAccount(context.Context, *CreateAndBindEOSAccountReq, *common.Empty) error
	// PageCurrency
	PageCurrency(context.Context, *PageCurrencyReq, *PageCurrencyRsp) error
	// PageBank
	PageBank(context.Context, *PageBankReq, *PageBankRsp) error
	// PageStore
	PageStore(context.Context, *PageStoreReq, *PageStoreRsp) error
	// CreateBank
	CreateBank(context.Context, *CreateBankReq, *Bank) error
	// CreateCurrency
	CreateCurrency(context.Context, *CreateCurrencyReq, *Currency) error
	// CreatStore
	CreateStore(context.Context, *CreateStoreReq, *Store) error
	// GetRebalancedRecord
	PageRebalancedRecord(context.Context, *PageRebalancedRecordRep, *PageRebalancedRecordRsp) error
	// GetAvailableIssueAmount
	GetAvailableIssueAmount(context.Context, *common.Empty, *GetAvailableIssueAmountRsp) error
	// ReviewedWithdrawAmount
	ReviewedWithdrawAmount(context.Context, *ReviewedWithdrawReq, *common.Empty) error
	// UpdateReceiptImages ...
	UpdateReceiptImages(context.Context, *UpdateReceiptImagesReq, *common.Empty) error
	// GetWithdrawableAmount ...
	GetWithdrawableAmount(context.Context, *common.Empty, *GetWithdrawableAmountRsp) error
}

func RegisterAUAHandler(s server.Server, hdlr AUAHandler, opts ...server.HandlerOption) error {
	type aUA interface {
		PageApplication(ctx context.Context, in *PageApplicationReq, out *PageApplicationRsp) error
		PageDepositApplication(ctx context.Context, in *PageApplicationReq, out *PageApplicationRsp) error
		PageWithdrawApplication(ctx context.Context, in *PageApplicationReq, out *PageApplicationRsp) error
		BindEOSAccount(ctx context.Context, in *BindEOSAccountReq, out *common.Empty) error
		GetAccount(ctx context.Context, in *GetAccountReq, out *GetAccountRsp) error
		SendApplyNumEmail(ctx context.Context, in *SendApplyNumReq, out *common.Empty) error
		AddReceipt(ctx context.Context, in *AddReceiptReq, out *AddReceiptRsp) error
		UpdateReceipt(ctx context.Context, in *UpdateReceiptReq, out *AddReceiptRsp) error
		ApplyIssue(ctx context.Context, in *ApplyIssueReq, out *ApplyIssueRsp) error
		ReviewApplication(ctx context.Context, in *ReviewApplicationReq, out *common.Empty) error
		ReviewDepositApplication(ctx context.Context, in *ReviewApplicationReq, out *common.Empty) error
		ReviewWithdrawApplication(ctx context.Context, in *ReviewApplicationReq, out *common.Empty) error
		PageContract(ctx context.Context, in *PageContractReq, out *PageContractRsp) error
		GetContract(ctx context.Context, in *GetContractInfoReq, out *GetContractInfoRsp) error
		PageReceipt(ctx context.Context, in *PageReceiptReq, out *PageReceiptRsp) error
		ApplyWithdraw(ctx context.Context, in *ApplyWithdrawReq, out *Application) error
		ApplyContract(ctx context.Context, in *ApplyContractReq, out *Application) error
		ApplyExchangeGold(ctx context.Context, in *ApplyExchangeGoldReq, out *Application) error
		ApplyRansom(ctx context.Context, in *ApplyRansomReq, out *ApplyRansomRsp) error
		ConfirmRansomReceipt(ctx context.Context, in *ConfirmRansomReceiptReq, out *Contract) error
		ConfirmApplyContract(ctx context.Context, in *ConfirmApplyContractReq, out *ConfirmApplyContractRsp) error
		ConfirmExchangeGold(ctx context.Context, in *ConfirmExchangeGoldReq, out *Contract) error
		GetTransferProgress(ctx context.Context, in *TransferProgressReq, out *TransferProgressRsp) error
		PageApplyContract(ctx context.Context, in *PageApplyContractReq, out *PageApplyContractRsp) error
		PageApplyExchangeGold(ctx context.Context, in *PageApplyExchangeGoldReq, out *PageApplyExchangeGoldRsp) error
		ConfirmDelivery(ctx context.Context, in *ConfirmDeliveryReq, out *common.Empty) error
		CancleExchangeGold(ctx context.Context, in *CancleExchangeGoldReq, out *common.Empty) error
		CreateAndBindEOSAccount(ctx context.Context, in *CreateAndBindEOSAccountReq, out *common.Empty) error
		PageCurrency(ctx context.Context, in *PageCurrencyReq, out *PageCurrencyRsp) error
		PageBank(ctx context.Context, in *PageBankReq, out *PageBankRsp) error
		PageStore(ctx context.Context, in *PageStoreReq, out *PageStoreRsp) error
		CreateBank(ctx context.Context, in *CreateBankReq, out *Bank) error
		CreateCurrency(ctx context.Context, in *CreateCurrencyReq, out *Currency) error
		CreateStore(ctx context.Context, in *CreateStoreReq, out *Store) error
		PageRebalancedRecord(ctx context.Context, in *PageRebalancedRecordRep, out *PageRebalancedRecordRsp) error
		GetAvailableIssueAmount(ctx context.Context, in *common.Empty, out *GetAvailableIssueAmountRsp) error
		ReviewedWithdrawAmount(ctx context.Context, in *ReviewedWithdrawReq, out *common.Empty) error
		UpdateReceiptImages(ctx context.Context, in *UpdateReceiptImagesReq, out *common.Empty) error
		GetWithdrawableAmount(ctx context.Context, in *common.Empty, out *GetWithdrawableAmountRsp) error
	}
	type AUA struct {
		aUA
	}
	h := &aUAHandler{hdlr}
	return s.Handle(s.NewHandler(&AUA{h}, opts...))
}

type aUAHandler struct {
	AUAHandler
}

func (h *aUAHandler) PageApplication(ctx context.Context, in *PageApplicationReq, out *PageApplicationRsp) error {
	return h.AUAHandler.PageApplication(ctx, in, out)
}

func (h *aUAHandler) PageDepositApplication(ctx context.Context, in *PageApplicationReq, out *PageApplicationRsp) error {
	return h.AUAHandler.PageDepositApplication(ctx, in, out)
}

func (h *aUAHandler) PageWithdrawApplication(ctx context.Context, in *PageApplicationReq, out *PageApplicationRsp) error {
	return h.AUAHandler.PageWithdrawApplication(ctx, in, out)
}

func (h *aUAHandler) BindEOSAccount(ctx context.Context, in *BindEOSAccountReq, out *common.Empty) error {
	return h.AUAHandler.BindEOSAccount(ctx, in, out)
}

func (h *aUAHandler) GetAccount(ctx context.Context, in *GetAccountReq, out *GetAccountRsp) error {
	return h.AUAHandler.GetAccount(ctx, in, out)
}

func (h *aUAHandler) SendApplyNumEmail(ctx context.Context, in *SendApplyNumReq, out *common.Empty) error {
	return h.AUAHandler.SendApplyNumEmail(ctx, in, out)
}

func (h *aUAHandler) AddReceipt(ctx context.Context, in *AddReceiptReq, out *AddReceiptRsp) error {
	return h.AUAHandler.AddReceipt(ctx, in, out)
}

func (h *aUAHandler) UpdateReceipt(ctx context.Context, in *UpdateReceiptReq, out *AddReceiptRsp) error {
	return h.AUAHandler.UpdateReceipt(ctx, in, out)
}

func (h *aUAHandler) ApplyIssue(ctx context.Context, in *ApplyIssueReq, out *ApplyIssueRsp) error {
	return h.AUAHandler.ApplyIssue(ctx, in, out)
}

func (h *aUAHandler) ReviewApplication(ctx context.Context, in *ReviewApplicationReq, out *common.Empty) error {
	return h.AUAHandler.ReviewApplication(ctx, in, out)
}

func (h *aUAHandler) ReviewDepositApplication(ctx context.Context, in *ReviewApplicationReq, out *common.Empty) error {
	return h.AUAHandler.ReviewDepositApplication(ctx, in, out)
}

func (h *aUAHandler) ReviewWithdrawApplication(ctx context.Context, in *ReviewApplicationReq, out *common.Empty) error {
	return h.AUAHandler.ReviewWithdrawApplication(ctx, in, out)
}

func (h *aUAHandler) PageContract(ctx context.Context, in *PageContractReq, out *PageContractRsp) error {
	return h.AUAHandler.PageContract(ctx, in, out)
}

func (h *aUAHandler) GetContract(ctx context.Context, in *GetContractInfoReq, out *GetContractInfoRsp) error {
	return h.AUAHandler.GetContract(ctx, in, out)
}

func (h *aUAHandler) PageReceipt(ctx context.Context, in *PageReceiptReq, out *PageReceiptRsp) error {
	return h.AUAHandler.PageReceipt(ctx, in, out)
}

func (h *aUAHandler) ApplyWithdraw(ctx context.Context, in *ApplyWithdrawReq, out *Application) error {
	return h.AUAHandler.ApplyWithdraw(ctx, in, out)
}

func (h *aUAHandler) ApplyContract(ctx context.Context, in *ApplyContractReq, out *Application) error {
	return h.AUAHandler.ApplyContract(ctx, in, out)
}

func (h *aUAHandler) ApplyExchangeGold(ctx context.Context, in *ApplyExchangeGoldReq, out *Application) error {
	return h.AUAHandler.ApplyExchangeGold(ctx, in, out)
}

func (h *aUAHandler) ApplyRansom(ctx context.Context, in *ApplyRansomReq, out *ApplyRansomRsp) error {
	return h.AUAHandler.ApplyRansom(ctx, in, out)
}

func (h *aUAHandler) ConfirmRansomReceipt(ctx context.Context, in *ConfirmRansomReceiptReq, out *Contract) error {
	return h.AUAHandler.ConfirmRansomReceipt(ctx, in, out)
}

func (h *aUAHandler) ConfirmApplyContract(ctx context.Context, in *ConfirmApplyContractReq, out *ConfirmApplyContractRsp) error {
	return h.AUAHandler.ConfirmApplyContract(ctx, in, out)
}

func (h *aUAHandler) ConfirmExchangeGold(ctx context.Context, in *ConfirmExchangeGoldReq, out *Contract) error {
	return h.AUAHandler.ConfirmExchangeGold(ctx, in, out)
}

func (h *aUAHandler) GetTransferProgress(ctx context.Context, in *TransferProgressReq, out *TransferProgressRsp) error {
	return h.AUAHandler.GetTransferProgress(ctx, in, out)
}

func (h *aUAHandler) PageApplyContract(ctx context.Context, in *PageApplyContractReq, out *PageApplyContractRsp) error {
	return h.AUAHandler.PageApplyContract(ctx, in, out)
}

func (h *aUAHandler) PageApplyExchangeGold(ctx context.Context, in *PageApplyExchangeGoldReq, out *PageApplyExchangeGoldRsp) error {
	return h.AUAHandler.PageApplyExchangeGold(ctx, in, out)
}

func (h *aUAHandler) ConfirmDelivery(ctx context.Context, in *ConfirmDeliveryReq, out *common.Empty) error {
	return h.AUAHandler.ConfirmDelivery(ctx, in, out)
}

func (h *aUAHandler) CancleExchangeGold(ctx context.Context, in *CancleExchangeGoldReq, out *common.Empty) error {
	return h.AUAHandler.CancleExchangeGold(ctx, in, out)
}

func (h *aUAHandler) CreateAndBindEOSAccount(ctx context.Context, in *CreateAndBindEOSAccountReq, out *common.Empty) error {
	return h.AUAHandler.CreateAndBindEOSAccount(ctx, in, out)
}

func (h *aUAHandler) PageCurrency(ctx context.Context, in *PageCurrencyReq, out *PageCurrencyRsp) error {
	return h.AUAHandler.PageCurrency(ctx, in, out)
}

func (h *aUAHandler) PageBank(ctx context.Context, in *PageBankReq, out *PageBankRsp) error {
	return h.AUAHandler.PageBank(ctx, in, out)
}

func (h *aUAHandler) PageStore(ctx context.Context, in *PageStoreReq, out *PageStoreRsp) error {
	return h.AUAHandler.PageStore(ctx, in, out)
}

func (h *aUAHandler) CreateBank(ctx context.Context, in *CreateBankReq, out *Bank) error {
	return h.AUAHandler.CreateBank(ctx, in, out)
}

func (h *aUAHandler) CreateCurrency(ctx context.Context, in *CreateCurrencyReq, out *Currency) error {
	return h.AUAHandler.CreateCurrency(ctx, in, out)
}

func (h *aUAHandler) CreateStore(ctx context.Context, in *CreateStoreReq, out *Store) error {
	return h.AUAHandler.CreateStore(ctx, in, out)
}

func (h *aUAHandler) PageRebalancedRecord(ctx context.Context, in *PageRebalancedRecordRep, out *PageRebalancedRecordRsp) error {
	return h.AUAHandler.PageRebalancedRecord(ctx, in, out)
}

func (h *aUAHandler) GetAvailableIssueAmount(ctx context.Context, in *common.Empty, out *GetAvailableIssueAmountRsp) error {
	return h.AUAHandler.GetAvailableIssueAmount(ctx, in, out)
}

func (h *aUAHandler) ReviewedWithdrawAmount(ctx context.Context, in *ReviewedWithdrawReq, out *common.Empty) error {
	return h.AUAHandler.ReviewedWithdrawAmount(ctx, in, out)
}

func (h *aUAHandler) UpdateReceiptImages(ctx context.Context, in *UpdateReceiptImagesReq, out *common.Empty) error {
	return h.AUAHandler.UpdateReceiptImages(ctx, in, out)
}

func (h *aUAHandler) GetWithdrawableAmount(ctx context.Context, in *common.Empty, out *GetWithdrawableAmountRsp) error {
	return h.AUAHandler.GetWithdrawableAmount(ctx, in, out)
}
