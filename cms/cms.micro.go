// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cms/cms.proto

/*
Package cms is a generated protocol buffer package.

It is generated from these files:
	cms/cms.proto

It has these top-level messages:
	Article
	PageArticleReq
	PageArticleRsp
	GetArticleReq
	Category
	PageCategoryReq
	PageCategoryRsp
	CategoryListReq
	CategoryListRsq
	Banner
	PageBannerReq
	PageBannerRsp
	Notice
	PageNoticeReq
	PageNoticeRsp
	GetNoticeReq
	PageAPILogReq
	APILog
	PageAPILogRsp
	Currency
	PageCurrencyReq
	PageCurrencyRsp
	Bank
	PageBankReq
	PageBankRsp
	Store
	PageStoreReq
	PageStoreRsp
	Vault
	PageVaultReq
	PageVaultRsp
	GoldAttachment
	Gold
	PageGoldReq
	PageGoldRsp
	UpdateBankCardReq
	PageBankCardReq
	PageBankCardRsp
*/
package cms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.bull-b.com/aua/aua-proto/common"
import _ "gitlab.bull-b.com/aua/aua-proto/user"
import _ "gitlab.bull-b.com/aua/aua-proto/user"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CMS service

type CMSService interface {
	// 文章分页
	PageArticle(ctx context.Context, in *PageArticleReq, opts ...client.CallOption) (*PageArticleRsp, error)
	// 获取文章详情
	GetArticle(ctx context.Context, in *GetArticleReq, opts ...client.CallOption) (*Article, error)
	// 创建文章
	CreateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*common.Empty, error)
	// 更新文章
	UpdateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*common.Empty, error)
	// 删除文章
	DeleteArticles(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 文章分类分页
	PageCategory(ctx context.Context, in *PageCategoryReq, opts ...client.CallOption) (*PageCategoryRsp, error)
	// 创建分类
	CreateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*common.Empty, error)
	// 更新分类
	UpdateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*common.Empty, error)
	// 删除分类
	DeleteCategorys(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 获取所有分类
	GetCategoryList(ctx context.Context, in *CategoryListReq, opts ...client.CallOption) (*CategoryListRsq, error)
	// banner分页
	PageBanner(ctx context.Context, in *PageBannerReq, opts ...client.CallOption) (*PageBannerRsp, error)
	// 创建banner
	CreateBanner(ctx context.Context, in *Banner, opts ...client.CallOption) (*common.Empty, error)
	// 更新banner
	UpdateBanner(ctx context.Context, in *Banner, opts ...client.CallOption) (*common.Empty, error)
	// 删除banner
	DeleteBanners(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 公告分页
	PageNotice(ctx context.Context, in *PageNoticeReq, opts ...client.CallOption) (*PageNoticeRsp, error)
	// 获取公告详情
	GetNotice(ctx context.Context, in *GetNoticeReq, opts ...client.CallOption) (*Notice, error)
	// 创建公告
	CreateNotice(ctx context.Context, in *Notice, opts ...client.CallOption) (*common.Empty, error)
	// 更新公告
	UpdateNotice(ctx context.Context, in *Notice, opts ...client.CallOption) (*common.Empty, error)
	// 删除公告
	DeleteNotices(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	//  查看API Log
	PageAPILog(ctx context.Context, in *PageAPILogReq, opts ...client.CallOption) (*PageAPILogRsp, error)
	// 貨幣分頁
	PageCurrency(ctx context.Context, in *PageCurrencyReq, opts ...client.CallOption) (*PageCurrencyRsp, error)
	// 創建貨幣
	CreateCurrency(ctx context.Context, in *Currency, opts ...client.CallOption) (*Currency, error)
	// 更新貨幣
	UpdateCurrency(ctx context.Context, in *Currency, opts ...client.CallOption) (*Currency, error)
	// 刪除貨幣
	DeleteCurrency(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 銀行
	PageBank(ctx context.Context, in *PageBankReq, opts ...client.CallOption) (*PageBankRsp, error)
	CreateBank(ctx context.Context, in *Bank, opts ...client.CallOption) (*common.Empty, error)
	UpdateBank(ctx context.Context, in *Bank, opts ...client.CallOption) (*common.Empty, error)
	DeleteBank(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 金鋪
	PageStore(ctx context.Context, in *PageStoreReq, opts ...client.CallOption) (*PageStoreRsp, error)
	CreateStore(ctx context.Context, in *Store, opts ...client.CallOption) (*common.Empty, error)
	UpdateStore(ctx context.Context, in *Store, opts ...client.CallOption) (*common.Empty, error)
	DeleteStore(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 金庫
	CreateVault(ctx context.Context, in *Vault, opts ...client.CallOption) (*common.Empty, error)
	PageVault(ctx context.Context, in *PageVaultReq, opts ...client.CallOption) (*PageVaultRsp, error)
	UpdateVault(ctx context.Context, in *Vault, opts ...client.CallOption) (*common.Empty, error)
	DeleteVault(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 金條
	CreateGold(ctx context.Context, in *Gold, opts ...client.CallOption) (*common.Empty, error)
	PageGold(ctx context.Context, in *PageGoldReq, opts ...client.CallOption) (*PageGoldRsp, error)
	UpdateGold(ctx context.Context, in *Gold, opts ...client.CallOption) (*common.Empty, error)
	DeleteGold(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	UpdateBankCard(ctx context.Context, in *UpdateBankCardReq, opts ...client.CallOption) (*common.Empty, error)
	PageBankCard(ctx context.Context, in *PageBankCardReq, opts ...client.CallOption) (*PageBankCardRsp, error)
}

type cMSService struct {
	c    client.Client
	name string
}

func NewCMSService(name string, c client.Client) CMSService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cms"
	}
	return &cMSService{
		c:    c,
		name: name,
	}
}

func (c *cMSService) PageArticle(ctx context.Context, in *PageArticleReq, opts ...client.CallOption) (*PageArticleRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageArticle", in)
	out := new(PageArticleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) GetArticle(ctx context.Context, in *GetArticleReq, opts ...client.CallOption) (*Article, error) {
	req := c.c.NewRequest(c.name, "CMS.GetArticle", in)
	out := new(Article)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateArticle", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateArticle", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteArticles(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteArticles", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageCategory(ctx context.Context, in *PageCategoryReq, opts ...client.CallOption) (*PageCategoryRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageCategory", in)
	out := new(PageCategoryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateCategory", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateCategory", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteCategorys(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteCategorys", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) GetCategoryList(ctx context.Context, in *CategoryListReq, opts ...client.CallOption) (*CategoryListRsq, error) {
	req := c.c.NewRequest(c.name, "CMS.GetCategoryList", in)
	out := new(CategoryListRsq)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageBanner(ctx context.Context, in *PageBannerReq, opts ...client.CallOption) (*PageBannerRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageBanner", in)
	out := new(PageBannerRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateBanner(ctx context.Context, in *Banner, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateBanner", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateBanner(ctx context.Context, in *Banner, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateBanner", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteBanners(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteBanners", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageNotice(ctx context.Context, in *PageNoticeReq, opts ...client.CallOption) (*PageNoticeRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageNotice", in)
	out := new(PageNoticeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) GetNotice(ctx context.Context, in *GetNoticeReq, opts ...client.CallOption) (*Notice, error) {
	req := c.c.NewRequest(c.name, "CMS.GetNotice", in)
	out := new(Notice)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateNotice(ctx context.Context, in *Notice, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateNotice", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateNotice(ctx context.Context, in *Notice, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateNotice", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteNotices(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteNotices", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageAPILog(ctx context.Context, in *PageAPILogReq, opts ...client.CallOption) (*PageAPILogRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageAPILog", in)
	out := new(PageAPILogRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageCurrency(ctx context.Context, in *PageCurrencyReq, opts ...client.CallOption) (*PageCurrencyRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageCurrency", in)
	out := new(PageCurrencyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateCurrency(ctx context.Context, in *Currency, opts ...client.CallOption) (*Currency, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateCurrency", in)
	out := new(Currency)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateCurrency(ctx context.Context, in *Currency, opts ...client.CallOption) (*Currency, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateCurrency", in)
	out := new(Currency)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteCurrency(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteCurrency", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageBank(ctx context.Context, in *PageBankReq, opts ...client.CallOption) (*PageBankRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageBank", in)
	out := new(PageBankRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateBank(ctx context.Context, in *Bank, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateBank", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateBank(ctx context.Context, in *Bank, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateBank", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteBank(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteBank", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageStore(ctx context.Context, in *PageStoreReq, opts ...client.CallOption) (*PageStoreRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageStore", in)
	out := new(PageStoreRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateStore(ctx context.Context, in *Store, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateStore", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateStore(ctx context.Context, in *Store, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateStore", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteStore(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteStore", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateVault(ctx context.Context, in *Vault, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateVault", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageVault(ctx context.Context, in *PageVaultReq, opts ...client.CallOption) (*PageVaultRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageVault", in)
	out := new(PageVaultRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateVault(ctx context.Context, in *Vault, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateVault", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteVault(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteVault", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) CreateGold(ctx context.Context, in *Gold, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.CreateGold", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageGold(ctx context.Context, in *PageGoldReq, opts ...client.CallOption) (*PageGoldRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageGold", in)
	out := new(PageGoldRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateGold(ctx context.Context, in *Gold, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateGold", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) DeleteGold(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.DeleteGold", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) UpdateBankCard(ctx context.Context, in *UpdateBankCardReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "CMS.UpdateBankCard", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSService) PageBankCard(ctx context.Context, in *PageBankCardReq, opts ...client.CallOption) (*PageBankCardRsp, error) {
	req := c.c.NewRequest(c.name, "CMS.PageBankCard", in)
	out := new(PageBankCardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CMS service

type CMSHandler interface {
	// 文章分页
	PageArticle(context.Context, *PageArticleReq, *PageArticleRsp) error
	// 获取文章详情
	GetArticle(context.Context, *GetArticleReq, *Article) error
	// 创建文章
	CreateArticle(context.Context, *Article, *common.Empty) error
	// 更新文章
	UpdateArticle(context.Context, *Article, *common.Empty) error
	// 删除文章
	DeleteArticles(context.Context, *common.IDs, *common.Empty) error
	// 文章分类分页
	PageCategory(context.Context, *PageCategoryReq, *PageCategoryRsp) error
	// 创建分类
	CreateCategory(context.Context, *Category, *common.Empty) error
	// 更新分类
	UpdateCategory(context.Context, *Category, *common.Empty) error
	// 删除分类
	DeleteCategorys(context.Context, *common.IDs, *common.Empty) error
	// 获取所有分类
	GetCategoryList(context.Context, *CategoryListReq, *CategoryListRsq) error
	// banner分页
	PageBanner(context.Context, *PageBannerReq, *PageBannerRsp) error
	// 创建banner
	CreateBanner(context.Context, *Banner, *common.Empty) error
	// 更新banner
	UpdateBanner(context.Context, *Banner, *common.Empty) error
	// 删除banner
	DeleteBanners(context.Context, *common.IDs, *common.Empty) error
	// 公告分页
	PageNotice(context.Context, *PageNoticeReq, *PageNoticeRsp) error
	// 获取公告详情
	GetNotice(context.Context, *GetNoticeReq, *Notice) error
	// 创建公告
	CreateNotice(context.Context, *Notice, *common.Empty) error
	// 更新公告
	UpdateNotice(context.Context, *Notice, *common.Empty) error
	// 删除公告
	DeleteNotices(context.Context, *common.IDs, *common.Empty) error
	//  查看API Log
	PageAPILog(context.Context, *PageAPILogReq, *PageAPILogRsp) error
	// 貨幣分頁
	PageCurrency(context.Context, *PageCurrencyReq, *PageCurrencyRsp) error
	// 創建貨幣
	CreateCurrency(context.Context, *Currency, *Currency) error
	// 更新貨幣
	UpdateCurrency(context.Context, *Currency, *Currency) error
	// 刪除貨幣
	DeleteCurrency(context.Context, *common.IDs, *common.Empty) error
	// 銀行
	PageBank(context.Context, *PageBankReq, *PageBankRsp) error
	CreateBank(context.Context, *Bank, *common.Empty) error
	UpdateBank(context.Context, *Bank, *common.Empty) error
	DeleteBank(context.Context, *common.IDs, *common.Empty) error
	// 金鋪
	PageStore(context.Context, *PageStoreReq, *PageStoreRsp) error
	CreateStore(context.Context, *Store, *common.Empty) error
	UpdateStore(context.Context, *Store, *common.Empty) error
	DeleteStore(context.Context, *common.IDs, *common.Empty) error
	// 金庫
	CreateVault(context.Context, *Vault, *common.Empty) error
	PageVault(context.Context, *PageVaultReq, *PageVaultRsp) error
	UpdateVault(context.Context, *Vault, *common.Empty) error
	DeleteVault(context.Context, *common.IDs, *common.Empty) error
	// 金條
	CreateGold(context.Context, *Gold, *common.Empty) error
	PageGold(context.Context, *PageGoldReq, *PageGoldRsp) error
	UpdateGold(context.Context, *Gold, *common.Empty) error
	DeleteGold(context.Context, *common.IDs, *common.Empty) error
	UpdateBankCard(context.Context, *UpdateBankCardReq, *common.Empty) error
	PageBankCard(context.Context, *PageBankCardReq, *PageBankCardRsp) error
}

func RegisterCMSHandler(s server.Server, hdlr CMSHandler, opts ...server.HandlerOption) error {
	type cMS interface {
		PageArticle(ctx context.Context, in *PageArticleReq, out *PageArticleRsp) error
		GetArticle(ctx context.Context, in *GetArticleReq, out *Article) error
		CreateArticle(ctx context.Context, in *Article, out *common.Empty) error
		UpdateArticle(ctx context.Context, in *Article, out *common.Empty) error
		DeleteArticles(ctx context.Context, in *common.IDs, out *common.Empty) error
		PageCategory(ctx context.Context, in *PageCategoryReq, out *PageCategoryRsp) error
		CreateCategory(ctx context.Context, in *Category, out *common.Empty) error
		UpdateCategory(ctx context.Context, in *Category, out *common.Empty) error
		DeleteCategorys(ctx context.Context, in *common.IDs, out *common.Empty) error
		GetCategoryList(ctx context.Context, in *CategoryListReq, out *CategoryListRsq) error
		PageBanner(ctx context.Context, in *PageBannerReq, out *PageBannerRsp) error
		CreateBanner(ctx context.Context, in *Banner, out *common.Empty) error
		UpdateBanner(ctx context.Context, in *Banner, out *common.Empty) error
		DeleteBanners(ctx context.Context, in *common.IDs, out *common.Empty) error
		PageNotice(ctx context.Context, in *PageNoticeReq, out *PageNoticeRsp) error
		GetNotice(ctx context.Context, in *GetNoticeReq, out *Notice) error
		CreateNotice(ctx context.Context, in *Notice, out *common.Empty) error
		UpdateNotice(ctx context.Context, in *Notice, out *common.Empty) error
		DeleteNotices(ctx context.Context, in *common.IDs, out *common.Empty) error
		PageAPILog(ctx context.Context, in *PageAPILogReq, out *PageAPILogRsp) error
		PageCurrency(ctx context.Context, in *PageCurrencyReq, out *PageCurrencyRsp) error
		CreateCurrency(ctx context.Context, in *Currency, out *Currency) error
		UpdateCurrency(ctx context.Context, in *Currency, out *Currency) error
		DeleteCurrency(ctx context.Context, in *common.IDs, out *common.Empty) error
		PageBank(ctx context.Context, in *PageBankReq, out *PageBankRsp) error
		CreateBank(ctx context.Context, in *Bank, out *common.Empty) error
		UpdateBank(ctx context.Context, in *Bank, out *common.Empty) error
		DeleteBank(ctx context.Context, in *common.IDs, out *common.Empty) error
		PageStore(ctx context.Context, in *PageStoreReq, out *PageStoreRsp) error
		CreateStore(ctx context.Context, in *Store, out *common.Empty) error
		UpdateStore(ctx context.Context, in *Store, out *common.Empty) error
		DeleteStore(ctx context.Context, in *common.IDs, out *common.Empty) error
		CreateVault(ctx context.Context, in *Vault, out *common.Empty) error
		PageVault(ctx context.Context, in *PageVaultReq, out *PageVaultRsp) error
		UpdateVault(ctx context.Context, in *Vault, out *common.Empty) error
		DeleteVault(ctx context.Context, in *common.IDs, out *common.Empty) error
		CreateGold(ctx context.Context, in *Gold, out *common.Empty) error
		PageGold(ctx context.Context, in *PageGoldReq, out *PageGoldRsp) error
		UpdateGold(ctx context.Context, in *Gold, out *common.Empty) error
		DeleteGold(ctx context.Context, in *common.IDs, out *common.Empty) error
		UpdateBankCard(ctx context.Context, in *UpdateBankCardReq, out *common.Empty) error
		PageBankCard(ctx context.Context, in *PageBankCardReq, out *PageBankCardRsp) error
	}
	type CMS struct {
		cMS
	}
	h := &cMSHandler{hdlr}
	return s.Handle(s.NewHandler(&CMS{h}, opts...))
}

type cMSHandler struct {
	CMSHandler
}

func (h *cMSHandler) PageArticle(ctx context.Context, in *PageArticleReq, out *PageArticleRsp) error {
	return h.CMSHandler.PageArticle(ctx, in, out)
}

func (h *cMSHandler) GetArticle(ctx context.Context, in *GetArticleReq, out *Article) error {
	return h.CMSHandler.GetArticle(ctx, in, out)
}

func (h *cMSHandler) CreateArticle(ctx context.Context, in *Article, out *common.Empty) error {
	return h.CMSHandler.CreateArticle(ctx, in, out)
}

func (h *cMSHandler) UpdateArticle(ctx context.Context, in *Article, out *common.Empty) error {
	return h.CMSHandler.UpdateArticle(ctx, in, out)
}

func (h *cMSHandler) DeleteArticles(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteArticles(ctx, in, out)
}

func (h *cMSHandler) PageCategory(ctx context.Context, in *PageCategoryReq, out *PageCategoryRsp) error {
	return h.CMSHandler.PageCategory(ctx, in, out)
}

func (h *cMSHandler) CreateCategory(ctx context.Context, in *Category, out *common.Empty) error {
	return h.CMSHandler.CreateCategory(ctx, in, out)
}

func (h *cMSHandler) UpdateCategory(ctx context.Context, in *Category, out *common.Empty) error {
	return h.CMSHandler.UpdateCategory(ctx, in, out)
}

func (h *cMSHandler) DeleteCategorys(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteCategorys(ctx, in, out)
}

func (h *cMSHandler) GetCategoryList(ctx context.Context, in *CategoryListReq, out *CategoryListRsq) error {
	return h.CMSHandler.GetCategoryList(ctx, in, out)
}

func (h *cMSHandler) PageBanner(ctx context.Context, in *PageBannerReq, out *PageBannerRsp) error {
	return h.CMSHandler.PageBanner(ctx, in, out)
}

func (h *cMSHandler) CreateBanner(ctx context.Context, in *Banner, out *common.Empty) error {
	return h.CMSHandler.CreateBanner(ctx, in, out)
}

func (h *cMSHandler) UpdateBanner(ctx context.Context, in *Banner, out *common.Empty) error {
	return h.CMSHandler.UpdateBanner(ctx, in, out)
}

func (h *cMSHandler) DeleteBanners(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteBanners(ctx, in, out)
}

func (h *cMSHandler) PageNotice(ctx context.Context, in *PageNoticeReq, out *PageNoticeRsp) error {
	return h.CMSHandler.PageNotice(ctx, in, out)
}

func (h *cMSHandler) GetNotice(ctx context.Context, in *GetNoticeReq, out *Notice) error {
	return h.CMSHandler.GetNotice(ctx, in, out)
}

func (h *cMSHandler) CreateNotice(ctx context.Context, in *Notice, out *common.Empty) error {
	return h.CMSHandler.CreateNotice(ctx, in, out)
}

func (h *cMSHandler) UpdateNotice(ctx context.Context, in *Notice, out *common.Empty) error {
	return h.CMSHandler.UpdateNotice(ctx, in, out)
}

func (h *cMSHandler) DeleteNotices(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteNotices(ctx, in, out)
}

func (h *cMSHandler) PageAPILog(ctx context.Context, in *PageAPILogReq, out *PageAPILogRsp) error {
	return h.CMSHandler.PageAPILog(ctx, in, out)
}

func (h *cMSHandler) PageCurrency(ctx context.Context, in *PageCurrencyReq, out *PageCurrencyRsp) error {
	return h.CMSHandler.PageCurrency(ctx, in, out)
}

func (h *cMSHandler) CreateCurrency(ctx context.Context, in *Currency, out *Currency) error {
	return h.CMSHandler.CreateCurrency(ctx, in, out)
}

func (h *cMSHandler) UpdateCurrency(ctx context.Context, in *Currency, out *Currency) error {
	return h.CMSHandler.UpdateCurrency(ctx, in, out)
}

func (h *cMSHandler) DeleteCurrency(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteCurrency(ctx, in, out)
}

func (h *cMSHandler) PageBank(ctx context.Context, in *PageBankReq, out *PageBankRsp) error {
	return h.CMSHandler.PageBank(ctx, in, out)
}

func (h *cMSHandler) CreateBank(ctx context.Context, in *Bank, out *common.Empty) error {
	return h.CMSHandler.CreateBank(ctx, in, out)
}

func (h *cMSHandler) UpdateBank(ctx context.Context, in *Bank, out *common.Empty) error {
	return h.CMSHandler.UpdateBank(ctx, in, out)
}

func (h *cMSHandler) DeleteBank(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteBank(ctx, in, out)
}

func (h *cMSHandler) PageStore(ctx context.Context, in *PageStoreReq, out *PageStoreRsp) error {
	return h.CMSHandler.PageStore(ctx, in, out)
}

func (h *cMSHandler) CreateStore(ctx context.Context, in *Store, out *common.Empty) error {
	return h.CMSHandler.CreateStore(ctx, in, out)
}

func (h *cMSHandler) UpdateStore(ctx context.Context, in *Store, out *common.Empty) error {
	return h.CMSHandler.UpdateStore(ctx, in, out)
}

func (h *cMSHandler) DeleteStore(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteStore(ctx, in, out)
}

func (h *cMSHandler) CreateVault(ctx context.Context, in *Vault, out *common.Empty) error {
	return h.CMSHandler.CreateVault(ctx, in, out)
}

func (h *cMSHandler) PageVault(ctx context.Context, in *PageVaultReq, out *PageVaultRsp) error {
	return h.CMSHandler.PageVault(ctx, in, out)
}

func (h *cMSHandler) UpdateVault(ctx context.Context, in *Vault, out *common.Empty) error {
	return h.CMSHandler.UpdateVault(ctx, in, out)
}

func (h *cMSHandler) DeleteVault(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteVault(ctx, in, out)
}

func (h *cMSHandler) CreateGold(ctx context.Context, in *Gold, out *common.Empty) error {
	return h.CMSHandler.CreateGold(ctx, in, out)
}

func (h *cMSHandler) PageGold(ctx context.Context, in *PageGoldReq, out *PageGoldRsp) error {
	return h.CMSHandler.PageGold(ctx, in, out)
}

func (h *cMSHandler) UpdateGold(ctx context.Context, in *Gold, out *common.Empty) error {
	return h.CMSHandler.UpdateGold(ctx, in, out)
}

func (h *cMSHandler) DeleteGold(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.CMSHandler.DeleteGold(ctx, in, out)
}

func (h *cMSHandler) UpdateBankCard(ctx context.Context, in *UpdateBankCardReq, out *common.Empty) error {
	return h.CMSHandler.UpdateBankCard(ctx, in, out)
}

func (h *cMSHandler) PageBankCard(ctx context.Context, in *PageBankCardReq, out *PageBankCardRsp) error {
	return h.CMSHandler.PageBankCard(ctx, in, out)
}
