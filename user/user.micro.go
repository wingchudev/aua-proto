// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/user.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.bull-b.com/aua/aua-proto/common"
import _ "gitlab.bull-b.com/aua/aua-proto/rights"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.Empty{}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error)
	// 角色
	PageRole(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error)
	// 注册
	Regist(ctx context.Context, in *RegistReq, opts ...client.CallOption) (*RegisterRsp, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*UserInfo, error)
	// 獲取後台用戶權限
	GetUserRight(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetUserRightRsp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...client.CallOption) (*common.Empty, error)
	// 设置交易密码
	SetTradePassword(ctx context.Context, in *SetTradePasswordReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改交易密码
	ChangeTradePassword(ctx context.Context, in *ChangeTradePasswordReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改手机号
	ChangeMobile(ctx context.Context, in *ChangeMobileReq, opts ...client.CallOption) (*common.Empty, error)
	// 绑定手机号
	BindMobile(ctx context.Context, in *BindMobileReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改邮箱
	ChangeEmail(ctx context.Context, in *ChangeEmailReq, opts ...client.CallOption) (*common.Empty, error)
	// 绑定邮箱
	BindEmail(ctx context.Context, in *BindEmailReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改昵称
	ChangeNickName(ctx context.Context, in *ChangeNickNameReq, opts ...client.CallOption) (*common.Empty, error)
	//  修改头像
	ChangeIcon(ctx context.Context, in *ChangeIconReq, opts ...client.CallOption) (*common.Empty, error)
	// 个人实名制
	Identify(ctx context.Context, in *IdentifyReq, opts ...client.CallOption) (*common.Empty, error)
	UpdateIdentifyRemark(ctx context.Context, in *UpdateIdentifyRemarkReq, opts ...client.CallOption) (*common.Empty, error)
	GetIdentify(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetIdentifyRsp, error)
	// 检查用户是否存在
	CheckUserExist(ctx context.Context, in *CheckUserReq, opts ...client.CallOption) (*common.Empty, error)
	//  获取图形验证码
	GetRecaptchaKey(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetRecaptchaKeyRsp, error)
	//  发送验证码
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...client.CallOption) (*SendVerifyCodeRsp, error)
	// 检查验证码
	CheckVerifyCode(ctx context.Context, in *CheckVerifyCodeReq, opts ...client.CallOption) (*common.Empty, error)
	// 获取国家码
	GetCountryCode(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetCountryCodeRsp, error)
	// 獲取國籍列表
	GetNationalityList(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetCountryCodeRsp, error)
	// 查看用户列表
	PageUser(ctx context.Context, in *PageUserReq, opts ...client.CallOption) (*PageUserRsp, error)
	// UserReport
	UserReport(ctx context.Context, in *UserReportReq, opts ...client.CallOption) (*UserReportRsp, error)
	// 查看金商列表
	PageMerchant(ctx context.Context, in *PageMerchantReq, opts ...client.CallOption) (*PageUserRsp, error)
	// 修改用户状态
	ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户类型
	ChangeUserType(ctx context.Context, in *ChangeUserTypeReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户角色
	ChangeUserRole(ctx context.Context, in *ChangeUserRoleReq, opts ...client.CallOption) (*common.Empty, error)
	// 查看用户实名
	PageIdentify(ctx context.Context, in *PageIdentifyReq, opts ...client.CallOption) (*PageIdentifyRsp, error)
	// 修改实名状态
	UpdateIdentify(ctx context.Context, in *UpdateIdentifyReq, opts ...client.CallOption) (*common.Empty, error)
	// 创建后台用户
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...client.CallOption) (*common.Empty, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...client.CallOption) (*common.Empty, error)
	// 刪除角色
	DeleteRole(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error)
	// 修改角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户简介
	UpdateUserBrief(ctx context.Context, in *UpdateUserBriefReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户简介
	UpdateUser(ctx context.Context, in *UpdateUserBriefReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户简介
	UpdateAdmin(ctx context.Context, in *UpdateUserBriefReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户密码
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...client.CallOption) (*common.Empty, error)
	// 修改用户交易密码
	UpdateUserTradePassword(ctx context.Context, in *UpdateUserTradePasswordReq, opts ...client.CallOption) (*common.Empty, error)
	// 登出
	Logout(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*common.Empty, error)
	// 查看验证码
	PageVerifyCode(ctx context.Context, in *PageVerifyCodeReq, opts ...client.CallOption) (*PageVerifyCodeRsp, error)
	// 变更收件地址
	BindReceiptAddress(ctx context.Context, in *BindReceiptAddressReq, opts ...client.CallOption) (*ReceiptAddress, error)
	// 获取收件地址
	GetReceiptAddress(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*ReceiptAddress, error)
	// 获取谷歌验证秘钥
	GetTwiceAuthSecret(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*TwiceAuthSecret, error)
	// 谷歌验证开启
	TwiceAuthOpen(ctx context.Context, in *TwiceAuthOpenReq, opts ...client.CallOption) (*UserInfo, error)
	// 谷歌验证关闭
	TwiceAuthClose(ctx context.Context, in *TwiceAuthCloseReq, opts ...client.CallOption) (*UserInfo, error)
	// 发送收据
	SendEmail(ctx context.Context, in *SendEmailReq, opts ...client.CallOption) (*common.Empty, error)
	// 更新用户实名认证文件
	UpdateIdentifyDocuments(ctx context.Context, in *UpdateIdentifyDocumentsReq, opts ...client.CallOption) (*common.Empty, error)
	AddBanks(ctx context.Context, in *AddBanksReq, opts ...client.CallOption) (*common.Empty, error)
	IdentifyRealID(ctx context.Context, in *IdentifyRealIDReq, opts ...client.CallOption) (*IdentifyRealIDRsp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error) {
	req := c.c.NewRequest(c.name, "User.Login", in)
	out := new(LoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PageRole(ctx context.Context, in *RoleReq, opts ...client.CallOption) (*RoleRsp, error) {
	req := c.c.NewRequest(c.name, "User.PageRole", in)
	out := new(RoleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Regist(ctx context.Context, in *RegistReq, opts ...client.CallOption) (*RegisterRsp, error) {
	req := c.c.NewRequest(c.name, "User.Regist", in)
	out := new(RegisterRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "User.GetUserInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserRight(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetUserRightRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetUserRight", in)
	out := new(GetUserRightRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ResetPassword", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangePassword", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SetTradePassword(ctx context.Context, in *SetTradePasswordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.SetTradePassword", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeTradePassword(ctx context.Context, in *ChangeTradePasswordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeTradePassword", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeMobile(ctx context.Context, in *ChangeMobileReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeMobile", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BindMobile(ctx context.Context, in *BindMobileReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.BindMobile", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeEmail(ctx context.Context, in *ChangeEmailReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeEmail", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BindEmail(ctx context.Context, in *BindEmailReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.BindEmail", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeNickName(ctx context.Context, in *ChangeNickNameReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeNickName", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeIcon(ctx context.Context, in *ChangeIconReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeIcon", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Identify(ctx context.Context, in *IdentifyReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.Identify", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateIdentifyRemark(ctx context.Context, in *UpdateIdentifyRemarkReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateIdentifyRemark", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetIdentify(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetIdentifyRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetIdentify", in)
	out := new(GetIdentifyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckUserExist(ctx context.Context, in *CheckUserReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.CheckUserExist", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetRecaptchaKey(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetRecaptchaKeyRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetRecaptchaKey", in)
	out := new(GetRecaptchaKeyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...client.CallOption) (*SendVerifyCodeRsp, error) {
	req := c.c.NewRequest(c.name, "User.SendVerifyCode", in)
	out := new(SendVerifyCodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CheckVerifyCode(ctx context.Context, in *CheckVerifyCodeReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.CheckVerifyCode", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetCountryCode(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetCountryCodeRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetCountryCode", in)
	out := new(GetCountryCodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetNationalityList(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*GetCountryCodeRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetNationalityList", in)
	out := new(GetCountryCodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PageUser(ctx context.Context, in *PageUserReq, opts ...client.CallOption) (*PageUserRsp, error) {
	req := c.c.NewRequest(c.name, "User.PageUser", in)
	out := new(PageUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserReport(ctx context.Context, in *UserReportReq, opts ...client.CallOption) (*UserReportRsp, error) {
	req := c.c.NewRequest(c.name, "User.UserReport", in)
	out := new(UserReportRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PageMerchant(ctx context.Context, in *PageMerchantReq, opts ...client.CallOption) (*PageUserRsp, error) {
	req := c.c.NewRequest(c.name, "User.PageMerchant", in)
	out := new(PageUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeUserStatus", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeUserType(ctx context.Context, in *ChangeUserTypeReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeUserType", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeUserRole(ctx context.Context, in *ChangeUserRoleReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.ChangeUserRole", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PageIdentify(ctx context.Context, in *PageIdentifyReq, opts ...client.CallOption) (*PageIdentifyRsp, error) {
	req := c.c.NewRequest(c.name, "User.PageIdentify", in)
	out := new(PageIdentifyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateIdentify(ctx context.Context, in *UpdateIdentifyReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateIdentify", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.CreateRole", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteRole(ctx context.Context, in *common.IDs, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.DeleteRole", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateRole", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserBrief(ctx context.Context, in *UpdateUserBriefReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserBrief", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserBriefReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateAdmin(ctx context.Context, in *UpdateUserBriefReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateAdmin", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserPassword", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserTradePassword(ctx context.Context, in *UpdateUserTradePasswordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserTradePassword", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) PageVerifyCode(ctx context.Context, in *PageVerifyCodeReq, opts ...client.CallOption) (*PageVerifyCodeRsp, error) {
	req := c.c.NewRequest(c.name, "User.PageVerifyCode", in)
	out := new(PageVerifyCodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BindReceiptAddress(ctx context.Context, in *BindReceiptAddressReq, opts ...client.CallOption) (*ReceiptAddress, error) {
	req := c.c.NewRequest(c.name, "User.BindReceiptAddress", in)
	out := new(ReceiptAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetReceiptAddress(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*ReceiptAddress, error) {
	req := c.c.NewRequest(c.name, "User.GetReceiptAddress", in)
	out := new(ReceiptAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetTwiceAuthSecret(ctx context.Context, in *common.Empty, opts ...client.CallOption) (*TwiceAuthSecret, error) {
	req := c.c.NewRequest(c.name, "User.GetTwiceAuthSecret", in)
	out := new(TwiceAuthSecret)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TwiceAuthOpen(ctx context.Context, in *TwiceAuthOpenReq, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "User.TwiceAuthOpen", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) TwiceAuthClose(ctx context.Context, in *TwiceAuthCloseReq, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "User.TwiceAuthClose", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SendEmail(ctx context.Context, in *SendEmailReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.SendEmail", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateIdentifyDocuments(ctx context.Context, in *UpdateIdentifyDocumentsReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.UpdateIdentifyDocuments", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddBanks(ctx context.Context, in *AddBanksReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "User.AddBanks", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) IdentifyRealID(ctx context.Context, in *IdentifyRealIDReq, opts ...client.CallOption) (*IdentifyRealIDRsp, error) {
	req := c.c.NewRequest(c.name, "User.IdentifyRealID", in)
	out := new(IdentifyRealIDRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// 登录
	Login(context.Context, *LoginReq, *LoginRsp) error
	// 角色
	PageRole(context.Context, *RoleReq, *RoleRsp) error
	// 注册
	Regist(context.Context, *RegistReq, *RegisterRsp) error
	// 获取用户信息
	GetUserInfo(context.Context, *GetUserInfoReq, *UserInfo) error
	// 獲取後台用戶權限
	GetUserRight(context.Context, *common.Empty, *GetUserRightRsp) error
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq, *common.Empty) error
	// 修改密码
	ChangePassword(context.Context, *ChangePasswordReq, *common.Empty) error
	// 设置交易密码
	SetTradePassword(context.Context, *SetTradePasswordReq, *common.Empty) error
	// 修改交易密码
	ChangeTradePassword(context.Context, *ChangeTradePasswordReq, *common.Empty) error
	// 修改手机号
	ChangeMobile(context.Context, *ChangeMobileReq, *common.Empty) error
	// 绑定手机号
	BindMobile(context.Context, *BindMobileReq, *common.Empty) error
	// 修改邮箱
	ChangeEmail(context.Context, *ChangeEmailReq, *common.Empty) error
	// 绑定邮箱
	BindEmail(context.Context, *BindEmailReq, *common.Empty) error
	// 修改昵称
	ChangeNickName(context.Context, *ChangeNickNameReq, *common.Empty) error
	//  修改头像
	ChangeIcon(context.Context, *ChangeIconReq, *common.Empty) error
	// 个人实名制
	Identify(context.Context, *IdentifyReq, *common.Empty) error
	UpdateIdentifyRemark(context.Context, *UpdateIdentifyRemarkReq, *common.Empty) error
	GetIdentify(context.Context, *common.Empty, *GetIdentifyRsp) error
	// 检查用户是否存在
	CheckUserExist(context.Context, *CheckUserReq, *common.Empty) error
	//  获取图形验证码
	GetRecaptchaKey(context.Context, *common.Empty, *GetRecaptchaKeyRsp) error
	//  发送验证码
	SendVerifyCode(context.Context, *SendVerifyCodeReq, *SendVerifyCodeRsp) error
	// 检查验证码
	CheckVerifyCode(context.Context, *CheckVerifyCodeReq, *common.Empty) error
	// 获取国家码
	GetCountryCode(context.Context, *common.Empty, *GetCountryCodeRsp) error
	// 獲取國籍列表
	GetNationalityList(context.Context, *common.Empty, *GetCountryCodeRsp) error
	// 查看用户列表
	PageUser(context.Context, *PageUserReq, *PageUserRsp) error
	// UserReport
	UserReport(context.Context, *UserReportReq, *UserReportRsp) error
	// 查看金商列表
	PageMerchant(context.Context, *PageMerchantReq, *PageUserRsp) error
	// 修改用户状态
	ChangeUserStatus(context.Context, *ChangeUserStatusReq, *common.Empty) error
	// 修改用户类型
	ChangeUserType(context.Context, *ChangeUserTypeReq, *common.Empty) error
	// 修改用户角色
	ChangeUserRole(context.Context, *ChangeUserRoleReq, *common.Empty) error
	// 查看用户实名
	PageIdentify(context.Context, *PageIdentifyReq, *PageIdentifyRsp) error
	// 修改实名状态
	UpdateIdentify(context.Context, *UpdateIdentifyReq, *common.Empty) error
	// 创建后台用户
	CreateUser(context.Context, *CreateUserReq, *common.Empty) error
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq, *common.Empty) error
	// 刪除角色
	DeleteRole(context.Context, *common.IDs, *common.Empty) error
	// 修改角色
	UpdateRole(context.Context, *UpdateRoleReq, *common.Empty) error
	// 修改用户简介
	UpdateUserBrief(context.Context, *UpdateUserBriefReq, *common.Empty) error
	// 修改用户简介
	UpdateUser(context.Context, *UpdateUserBriefReq, *common.Empty) error
	// 修改用户简介
	UpdateAdmin(context.Context, *UpdateUserBriefReq, *common.Empty) error
	// 修改用户密码
	UpdateUserPassword(context.Context, *UpdateUserPasswordReq, *common.Empty) error
	// 修改用户交易密码
	UpdateUserTradePassword(context.Context, *UpdateUserTradePasswordReq, *common.Empty) error
	// 登出
	Logout(context.Context, *common.Empty, *common.Empty) error
	// 查看验证码
	PageVerifyCode(context.Context, *PageVerifyCodeReq, *PageVerifyCodeRsp) error
	// 变更收件地址
	BindReceiptAddress(context.Context, *BindReceiptAddressReq, *ReceiptAddress) error
	// 获取收件地址
	GetReceiptAddress(context.Context, *common.Empty, *ReceiptAddress) error
	// 获取谷歌验证秘钥
	GetTwiceAuthSecret(context.Context, *common.Empty, *TwiceAuthSecret) error
	// 谷歌验证开启
	TwiceAuthOpen(context.Context, *TwiceAuthOpenReq, *UserInfo) error
	// 谷歌验证关闭
	TwiceAuthClose(context.Context, *TwiceAuthCloseReq, *UserInfo) error
	// 发送收据
	SendEmail(context.Context, *SendEmailReq, *common.Empty) error
	// 更新用户实名认证文件
	UpdateIdentifyDocuments(context.Context, *UpdateIdentifyDocumentsReq, *common.Empty) error
	AddBanks(context.Context, *AddBanksReq, *common.Empty) error
	IdentifyRealID(context.Context, *IdentifyRealIDReq, *IdentifyRealIDRsp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRsp) error
		PageRole(ctx context.Context, in *RoleReq, out *RoleRsp) error
		Regist(ctx context.Context, in *RegistReq, out *RegisterRsp) error
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, out *UserInfo) error
		GetUserRight(ctx context.Context, in *common.Empty, out *GetUserRightRsp) error
		ResetPassword(ctx context.Context, in *ResetPasswordReq, out *common.Empty) error
		ChangePassword(ctx context.Context, in *ChangePasswordReq, out *common.Empty) error
		SetTradePassword(ctx context.Context, in *SetTradePasswordReq, out *common.Empty) error
		ChangeTradePassword(ctx context.Context, in *ChangeTradePasswordReq, out *common.Empty) error
		ChangeMobile(ctx context.Context, in *ChangeMobileReq, out *common.Empty) error
		BindMobile(ctx context.Context, in *BindMobileReq, out *common.Empty) error
		ChangeEmail(ctx context.Context, in *ChangeEmailReq, out *common.Empty) error
		BindEmail(ctx context.Context, in *BindEmailReq, out *common.Empty) error
		ChangeNickName(ctx context.Context, in *ChangeNickNameReq, out *common.Empty) error
		ChangeIcon(ctx context.Context, in *ChangeIconReq, out *common.Empty) error
		Identify(ctx context.Context, in *IdentifyReq, out *common.Empty) error
		UpdateIdentifyRemark(ctx context.Context, in *UpdateIdentifyRemarkReq, out *common.Empty) error
		GetIdentify(ctx context.Context, in *common.Empty, out *GetIdentifyRsp) error
		CheckUserExist(ctx context.Context, in *CheckUserReq, out *common.Empty) error
		GetRecaptchaKey(ctx context.Context, in *common.Empty, out *GetRecaptchaKeyRsp) error
		SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, out *SendVerifyCodeRsp) error
		CheckVerifyCode(ctx context.Context, in *CheckVerifyCodeReq, out *common.Empty) error
		GetCountryCode(ctx context.Context, in *common.Empty, out *GetCountryCodeRsp) error
		GetNationalityList(ctx context.Context, in *common.Empty, out *GetCountryCodeRsp) error
		PageUser(ctx context.Context, in *PageUserReq, out *PageUserRsp) error
		UserReport(ctx context.Context, in *UserReportReq, out *UserReportRsp) error
		PageMerchant(ctx context.Context, in *PageMerchantReq, out *PageUserRsp) error
		ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, out *common.Empty) error
		ChangeUserType(ctx context.Context, in *ChangeUserTypeReq, out *common.Empty) error
		ChangeUserRole(ctx context.Context, in *ChangeUserRoleReq, out *common.Empty) error
		PageIdentify(ctx context.Context, in *PageIdentifyReq, out *PageIdentifyRsp) error
		UpdateIdentify(ctx context.Context, in *UpdateIdentifyReq, out *common.Empty) error
		CreateUser(ctx context.Context, in *CreateUserReq, out *common.Empty) error
		CreateRole(ctx context.Context, in *CreateRoleReq, out *common.Empty) error
		DeleteRole(ctx context.Context, in *common.IDs, out *common.Empty) error
		UpdateRole(ctx context.Context, in *UpdateRoleReq, out *common.Empty) error
		UpdateUserBrief(ctx context.Context, in *UpdateUserBriefReq, out *common.Empty) error
		UpdateUser(ctx context.Context, in *UpdateUserBriefReq, out *common.Empty) error
		UpdateAdmin(ctx context.Context, in *UpdateUserBriefReq, out *common.Empty) error
		UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, out *common.Empty) error
		UpdateUserTradePassword(ctx context.Context, in *UpdateUserTradePasswordReq, out *common.Empty) error
		Logout(ctx context.Context, in *common.Empty, out *common.Empty) error
		PageVerifyCode(ctx context.Context, in *PageVerifyCodeReq, out *PageVerifyCodeRsp) error
		BindReceiptAddress(ctx context.Context, in *BindReceiptAddressReq, out *ReceiptAddress) error
		GetReceiptAddress(ctx context.Context, in *common.Empty, out *ReceiptAddress) error
		GetTwiceAuthSecret(ctx context.Context, in *common.Empty, out *TwiceAuthSecret) error
		TwiceAuthOpen(ctx context.Context, in *TwiceAuthOpenReq, out *UserInfo) error
		TwiceAuthClose(ctx context.Context, in *TwiceAuthCloseReq, out *UserInfo) error
		SendEmail(ctx context.Context, in *SendEmailReq, out *common.Empty) error
		UpdateIdentifyDocuments(ctx context.Context, in *UpdateIdentifyDocumentsReq, out *common.Empty) error
		AddBanks(ctx context.Context, in *AddBanksReq, out *common.Empty) error
		IdentifyRealID(ctx context.Context, in *IdentifyRealIDReq, out *IdentifyRealIDRsp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Login(ctx context.Context, in *LoginReq, out *LoginRsp) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *userHandler) PageRole(ctx context.Context, in *RoleReq, out *RoleRsp) error {
	return h.UserHandler.PageRole(ctx, in, out)
}

func (h *userHandler) Regist(ctx context.Context, in *RegistReq, out *RegisterRsp) error {
	return h.UserHandler.Regist(ctx, in, out)
}

func (h *userHandler) GetUserInfo(ctx context.Context, in *GetUserInfoReq, out *UserInfo) error {
	return h.UserHandler.GetUserInfo(ctx, in, out)
}

func (h *userHandler) GetUserRight(ctx context.Context, in *common.Empty, out *GetUserRightRsp) error {
	return h.UserHandler.GetUserRight(ctx, in, out)
}

func (h *userHandler) ResetPassword(ctx context.Context, in *ResetPasswordReq, out *common.Empty) error {
	return h.UserHandler.ResetPassword(ctx, in, out)
}

func (h *userHandler) ChangePassword(ctx context.Context, in *ChangePasswordReq, out *common.Empty) error {
	return h.UserHandler.ChangePassword(ctx, in, out)
}

func (h *userHandler) SetTradePassword(ctx context.Context, in *SetTradePasswordReq, out *common.Empty) error {
	return h.UserHandler.SetTradePassword(ctx, in, out)
}

func (h *userHandler) ChangeTradePassword(ctx context.Context, in *ChangeTradePasswordReq, out *common.Empty) error {
	return h.UserHandler.ChangeTradePassword(ctx, in, out)
}

func (h *userHandler) ChangeMobile(ctx context.Context, in *ChangeMobileReq, out *common.Empty) error {
	return h.UserHandler.ChangeMobile(ctx, in, out)
}

func (h *userHandler) BindMobile(ctx context.Context, in *BindMobileReq, out *common.Empty) error {
	return h.UserHandler.BindMobile(ctx, in, out)
}

func (h *userHandler) ChangeEmail(ctx context.Context, in *ChangeEmailReq, out *common.Empty) error {
	return h.UserHandler.ChangeEmail(ctx, in, out)
}

func (h *userHandler) BindEmail(ctx context.Context, in *BindEmailReq, out *common.Empty) error {
	return h.UserHandler.BindEmail(ctx, in, out)
}

func (h *userHandler) ChangeNickName(ctx context.Context, in *ChangeNickNameReq, out *common.Empty) error {
	return h.UserHandler.ChangeNickName(ctx, in, out)
}

func (h *userHandler) ChangeIcon(ctx context.Context, in *ChangeIconReq, out *common.Empty) error {
	return h.UserHandler.ChangeIcon(ctx, in, out)
}

func (h *userHandler) Identify(ctx context.Context, in *IdentifyReq, out *common.Empty) error {
	return h.UserHandler.Identify(ctx, in, out)
}

func (h *userHandler) UpdateIdentifyRemark(ctx context.Context, in *UpdateIdentifyRemarkReq, out *common.Empty) error {
	return h.UserHandler.UpdateIdentifyRemark(ctx, in, out)
}

func (h *userHandler) GetIdentify(ctx context.Context, in *common.Empty, out *GetIdentifyRsp) error {
	return h.UserHandler.GetIdentify(ctx, in, out)
}

func (h *userHandler) CheckUserExist(ctx context.Context, in *CheckUserReq, out *common.Empty) error {
	return h.UserHandler.CheckUserExist(ctx, in, out)
}

func (h *userHandler) GetRecaptchaKey(ctx context.Context, in *common.Empty, out *GetRecaptchaKeyRsp) error {
	return h.UserHandler.GetRecaptchaKey(ctx, in, out)
}

func (h *userHandler) SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, out *SendVerifyCodeRsp) error {
	return h.UserHandler.SendVerifyCode(ctx, in, out)
}

func (h *userHandler) CheckVerifyCode(ctx context.Context, in *CheckVerifyCodeReq, out *common.Empty) error {
	return h.UserHandler.CheckVerifyCode(ctx, in, out)
}

func (h *userHandler) GetCountryCode(ctx context.Context, in *common.Empty, out *GetCountryCodeRsp) error {
	return h.UserHandler.GetCountryCode(ctx, in, out)
}

func (h *userHandler) GetNationalityList(ctx context.Context, in *common.Empty, out *GetCountryCodeRsp) error {
	return h.UserHandler.GetNationalityList(ctx, in, out)
}

func (h *userHandler) PageUser(ctx context.Context, in *PageUserReq, out *PageUserRsp) error {
	return h.UserHandler.PageUser(ctx, in, out)
}

func (h *userHandler) UserReport(ctx context.Context, in *UserReportReq, out *UserReportRsp) error {
	return h.UserHandler.UserReport(ctx, in, out)
}

func (h *userHandler) PageMerchant(ctx context.Context, in *PageMerchantReq, out *PageUserRsp) error {
	return h.UserHandler.PageMerchant(ctx, in, out)
}

func (h *userHandler) ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, out *common.Empty) error {
	return h.UserHandler.ChangeUserStatus(ctx, in, out)
}

func (h *userHandler) ChangeUserType(ctx context.Context, in *ChangeUserTypeReq, out *common.Empty) error {
	return h.UserHandler.ChangeUserType(ctx, in, out)
}

func (h *userHandler) ChangeUserRole(ctx context.Context, in *ChangeUserRoleReq, out *common.Empty) error {
	return h.UserHandler.ChangeUserRole(ctx, in, out)
}

func (h *userHandler) PageIdentify(ctx context.Context, in *PageIdentifyReq, out *PageIdentifyRsp) error {
	return h.UserHandler.PageIdentify(ctx, in, out)
}

func (h *userHandler) UpdateIdentify(ctx context.Context, in *UpdateIdentifyReq, out *common.Empty) error {
	return h.UserHandler.UpdateIdentify(ctx, in, out)
}

func (h *userHandler) CreateUser(ctx context.Context, in *CreateUserReq, out *common.Empty) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) CreateRole(ctx context.Context, in *CreateRoleReq, out *common.Empty) error {
	return h.UserHandler.CreateRole(ctx, in, out)
}

func (h *userHandler) DeleteRole(ctx context.Context, in *common.IDs, out *common.Empty) error {
	return h.UserHandler.DeleteRole(ctx, in, out)
}

func (h *userHandler) UpdateRole(ctx context.Context, in *UpdateRoleReq, out *common.Empty) error {
	return h.UserHandler.UpdateRole(ctx, in, out)
}

func (h *userHandler) UpdateUserBrief(ctx context.Context, in *UpdateUserBriefReq, out *common.Empty) error {
	return h.UserHandler.UpdateUserBrief(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UpdateUserBriefReq, out *common.Empty) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) UpdateAdmin(ctx context.Context, in *UpdateUserBriefReq, out *common.Empty) error {
	return h.UserHandler.UpdateAdmin(ctx, in, out)
}

func (h *userHandler) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, out *common.Empty) error {
	return h.UserHandler.UpdateUserPassword(ctx, in, out)
}

func (h *userHandler) UpdateUserTradePassword(ctx context.Context, in *UpdateUserTradePasswordReq, out *common.Empty) error {
	return h.UserHandler.UpdateUserTradePassword(ctx, in, out)
}

func (h *userHandler) Logout(ctx context.Context, in *common.Empty, out *common.Empty) error {
	return h.UserHandler.Logout(ctx, in, out)
}

func (h *userHandler) PageVerifyCode(ctx context.Context, in *PageVerifyCodeReq, out *PageVerifyCodeRsp) error {
	return h.UserHandler.PageVerifyCode(ctx, in, out)
}

func (h *userHandler) BindReceiptAddress(ctx context.Context, in *BindReceiptAddressReq, out *ReceiptAddress) error {
	return h.UserHandler.BindReceiptAddress(ctx, in, out)
}

func (h *userHandler) GetReceiptAddress(ctx context.Context, in *common.Empty, out *ReceiptAddress) error {
	return h.UserHandler.GetReceiptAddress(ctx, in, out)
}

func (h *userHandler) GetTwiceAuthSecret(ctx context.Context, in *common.Empty, out *TwiceAuthSecret) error {
	return h.UserHandler.GetTwiceAuthSecret(ctx, in, out)
}

func (h *userHandler) TwiceAuthOpen(ctx context.Context, in *TwiceAuthOpenReq, out *UserInfo) error {
	return h.UserHandler.TwiceAuthOpen(ctx, in, out)
}

func (h *userHandler) TwiceAuthClose(ctx context.Context, in *TwiceAuthCloseReq, out *UserInfo) error {
	return h.UserHandler.TwiceAuthClose(ctx, in, out)
}

func (h *userHandler) SendEmail(ctx context.Context, in *SendEmailReq, out *common.Empty) error {
	return h.UserHandler.SendEmail(ctx, in, out)
}

func (h *userHandler) UpdateIdentifyDocuments(ctx context.Context, in *UpdateIdentifyDocumentsReq, out *common.Empty) error {
	return h.UserHandler.UpdateIdentifyDocuments(ctx, in, out)
}

func (h *userHandler) AddBanks(ctx context.Context, in *AddBanksReq, out *common.Empty) error {
	return h.UserHandler.AddBanks(ctx, in, out)
}

func (h *userHandler) IdentifyRealID(ctx context.Context, in *IdentifyRealIDReq, out *IdentifyRealIDRsp) error {
	return h.UserHandler.IdentifyRealID(ctx, in, out)
}
