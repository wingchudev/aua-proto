// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wallet/wallet.proto

package wallet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.bull-b.com/aua/aua-proto/common"
import _ "gitlab.bull-b.com/aua/aua-proto/common"
import _ "gitlab.bull-b.com/aua/aua-proto/user"
import _ "gitlab.bull-b.com/aua/aua-proto/user"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common.Empty{}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Wallet service

type WalletService interface {
	//  检查地址
	CheckAddress(ctx context.Context, in *CheckAddressReq, opts ...client.CallOption) (*common.Empty, error)
	//  获取转账地址
	GetTransferAddress(ctx context.Context, in *GetTransferAddressReq, opts ...client.CallOption) (*GetTransferAddressRsp, error)
	//  请求发币
	CreateIssueChainRecord(ctx context.Context, in *CreateIssueChainRecordReq, opts ...client.CallOption) (*CreateIssueChainRecordRsp, error)
	//  请求销币
	CreateBurnChainRecord(ctx context.Context, in *CreateBurnChainRecordReq, opts ...client.CallOption) (*CreateBurnChainRecordRsp, error)
	// 获取预期分红列表
	FindExpectedProfit(ctx context.Context, in *PageExpectedProfitReq, opts ...client.CallOption) (*PageExpectedProfitResp, error)
	// 签名
	SignChainRecord(ctx context.Context, in *SignedChainRecordReq, opts ...client.CallOption) (*common.Empty, error)
	// 签名
	SignIssueChainRecord(ctx context.Context, in *SignedChainRecordReq, opts ...client.CallOption) (*common.Empty, error)
	// 签名
	SignRetireChainRecord(ctx context.Context, in *SignedChainRecordReq, opts ...client.CallOption) (*common.Empty, error)
	// 获取授权管理列表
	PageChainRecord(ctx context.Context, in *PageChainRecordReq, opts ...client.CallOption) (*PageChainRecordResp, error)
	// 获取授权管理列表
	PageIssueChainRecord(ctx context.Context, in *PageChainRecordReq, opts ...client.CallOption) (*PageChainRecordResp, error)
	// 获取授权管理列表
	PageRetireChainRecord(ctx context.Context, in *PageChainRecordReq, opts ...client.CallOption) (*PageChainRecordResp, error)
	// 獲取已發幣數量
	GetSupply(ctx context.Context, in *GetSupplyReq, opts ...client.CallOption) (*GetSupplyRsp, error)
	// 獲取帳號擁有量
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceReq, opts ...client.CallOption) (*GetAccountBalanceRsp, error)
}

type walletService struct {
	c    client.Client
	name string
}

func NewWalletService(name string, c client.Client) WalletService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "wallet"
	}
	return &walletService{
		c:    c,
		name: name,
	}
}

func (c *walletService) CheckAddress(ctx context.Context, in *CheckAddressReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "Wallet.CheckAddress", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetTransferAddress(ctx context.Context, in *GetTransferAddressReq, opts ...client.CallOption) (*GetTransferAddressRsp, error) {
	req := c.c.NewRequest(c.name, "Wallet.GetTransferAddress", in)
	out := new(GetTransferAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) CreateIssueChainRecord(ctx context.Context, in *CreateIssueChainRecordReq, opts ...client.CallOption) (*CreateIssueChainRecordRsp, error) {
	req := c.c.NewRequest(c.name, "Wallet.CreateIssueChainRecord", in)
	out := new(CreateIssueChainRecordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) CreateBurnChainRecord(ctx context.Context, in *CreateBurnChainRecordReq, opts ...client.CallOption) (*CreateBurnChainRecordRsp, error) {
	req := c.c.NewRequest(c.name, "Wallet.CreateBurnChainRecord", in)
	out := new(CreateBurnChainRecordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) FindExpectedProfit(ctx context.Context, in *PageExpectedProfitReq, opts ...client.CallOption) (*PageExpectedProfitResp, error) {
	req := c.c.NewRequest(c.name, "Wallet.FindExpectedProfit", in)
	out := new(PageExpectedProfitResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) SignChainRecord(ctx context.Context, in *SignedChainRecordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "Wallet.SignChainRecord", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) SignIssueChainRecord(ctx context.Context, in *SignedChainRecordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "Wallet.SignIssueChainRecord", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) SignRetireChainRecord(ctx context.Context, in *SignedChainRecordReq, opts ...client.CallOption) (*common.Empty, error) {
	req := c.c.NewRequest(c.name, "Wallet.SignRetireChainRecord", in)
	out := new(common.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) PageChainRecord(ctx context.Context, in *PageChainRecordReq, opts ...client.CallOption) (*PageChainRecordResp, error) {
	req := c.c.NewRequest(c.name, "Wallet.PageChainRecord", in)
	out := new(PageChainRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) PageIssueChainRecord(ctx context.Context, in *PageChainRecordReq, opts ...client.CallOption) (*PageChainRecordResp, error) {
	req := c.c.NewRequest(c.name, "Wallet.PageIssueChainRecord", in)
	out := new(PageChainRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) PageRetireChainRecord(ctx context.Context, in *PageChainRecordReq, opts ...client.CallOption) (*PageChainRecordResp, error) {
	req := c.c.NewRequest(c.name, "Wallet.PageRetireChainRecord", in)
	out := new(PageChainRecordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetSupply(ctx context.Context, in *GetSupplyReq, opts ...client.CallOption) (*GetSupplyRsp, error) {
	req := c.c.NewRequest(c.name, "Wallet.GetSupply", in)
	out := new(GetSupplyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GetAccountBalance(ctx context.Context, in *GetAccountBalanceReq, opts ...client.CallOption) (*GetAccountBalanceRsp, error) {
	req := c.c.NewRequest(c.name, "Wallet.GetAccountBalance", in)
	out := new(GetAccountBalanceRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wallet service

type WalletHandler interface {
	//  检查地址
	CheckAddress(context.Context, *CheckAddressReq, *common.Empty) error
	//  获取转账地址
	GetTransferAddress(context.Context, *GetTransferAddressReq, *GetTransferAddressRsp) error
	//  请求发币
	CreateIssueChainRecord(context.Context, *CreateIssueChainRecordReq, *CreateIssueChainRecordRsp) error
	//  请求销币
	CreateBurnChainRecord(context.Context, *CreateBurnChainRecordReq, *CreateBurnChainRecordRsp) error
	// 获取预期分红列表
	FindExpectedProfit(context.Context, *PageExpectedProfitReq, *PageExpectedProfitResp) error
	// 签名
	SignChainRecord(context.Context, *SignedChainRecordReq, *common.Empty) error
	// 签名
	SignIssueChainRecord(context.Context, *SignedChainRecordReq, *common.Empty) error
	// 签名
	SignRetireChainRecord(context.Context, *SignedChainRecordReq, *common.Empty) error
	// 获取授权管理列表
	PageChainRecord(context.Context, *PageChainRecordReq, *PageChainRecordResp) error
	// 获取授权管理列表
	PageIssueChainRecord(context.Context, *PageChainRecordReq, *PageChainRecordResp) error
	// 获取授权管理列表
	PageRetireChainRecord(context.Context, *PageChainRecordReq, *PageChainRecordResp) error
	// 獲取已發幣數量
	GetSupply(context.Context, *GetSupplyReq, *GetSupplyRsp) error
	// 獲取帳號擁有量
	GetAccountBalance(context.Context, *GetAccountBalanceReq, *GetAccountBalanceRsp) error
}

func RegisterWalletHandler(s server.Server, hdlr WalletHandler, opts ...server.HandlerOption) error {
	type wallet interface {
		CheckAddress(ctx context.Context, in *CheckAddressReq, out *common.Empty) error
		GetTransferAddress(ctx context.Context, in *GetTransferAddressReq, out *GetTransferAddressRsp) error
		CreateIssueChainRecord(ctx context.Context, in *CreateIssueChainRecordReq, out *CreateIssueChainRecordRsp) error
		CreateBurnChainRecord(ctx context.Context, in *CreateBurnChainRecordReq, out *CreateBurnChainRecordRsp) error
		FindExpectedProfit(ctx context.Context, in *PageExpectedProfitReq, out *PageExpectedProfitResp) error
		SignChainRecord(ctx context.Context, in *SignedChainRecordReq, out *common.Empty) error
		SignIssueChainRecord(ctx context.Context, in *SignedChainRecordReq, out *common.Empty) error
		SignRetireChainRecord(ctx context.Context, in *SignedChainRecordReq, out *common.Empty) error
		PageChainRecord(ctx context.Context, in *PageChainRecordReq, out *PageChainRecordResp) error
		PageIssueChainRecord(ctx context.Context, in *PageChainRecordReq, out *PageChainRecordResp) error
		PageRetireChainRecord(ctx context.Context, in *PageChainRecordReq, out *PageChainRecordResp) error
		GetSupply(ctx context.Context, in *GetSupplyReq, out *GetSupplyRsp) error
		GetAccountBalance(ctx context.Context, in *GetAccountBalanceReq, out *GetAccountBalanceRsp) error
	}
	type Wallet struct {
		wallet
	}
	h := &walletHandler{hdlr}
	return s.Handle(s.NewHandler(&Wallet{h}, opts...))
}

type walletHandler struct {
	WalletHandler
}

func (h *walletHandler) CheckAddress(ctx context.Context, in *CheckAddressReq, out *common.Empty) error {
	return h.WalletHandler.CheckAddress(ctx, in, out)
}

func (h *walletHandler) GetTransferAddress(ctx context.Context, in *GetTransferAddressReq, out *GetTransferAddressRsp) error {
	return h.WalletHandler.GetTransferAddress(ctx, in, out)
}

func (h *walletHandler) CreateIssueChainRecord(ctx context.Context, in *CreateIssueChainRecordReq, out *CreateIssueChainRecordRsp) error {
	return h.WalletHandler.CreateIssueChainRecord(ctx, in, out)
}

func (h *walletHandler) CreateBurnChainRecord(ctx context.Context, in *CreateBurnChainRecordReq, out *CreateBurnChainRecordRsp) error {
	return h.WalletHandler.CreateBurnChainRecord(ctx, in, out)
}

func (h *walletHandler) FindExpectedProfit(ctx context.Context, in *PageExpectedProfitReq, out *PageExpectedProfitResp) error {
	return h.WalletHandler.FindExpectedProfit(ctx, in, out)
}

func (h *walletHandler) SignChainRecord(ctx context.Context, in *SignedChainRecordReq, out *common.Empty) error {
	return h.WalletHandler.SignChainRecord(ctx, in, out)
}

func (h *walletHandler) SignIssueChainRecord(ctx context.Context, in *SignedChainRecordReq, out *common.Empty) error {
	return h.WalletHandler.SignIssueChainRecord(ctx, in, out)
}

func (h *walletHandler) SignRetireChainRecord(ctx context.Context, in *SignedChainRecordReq, out *common.Empty) error {
	return h.WalletHandler.SignRetireChainRecord(ctx, in, out)
}

func (h *walletHandler) PageChainRecord(ctx context.Context, in *PageChainRecordReq, out *PageChainRecordResp) error {
	return h.WalletHandler.PageChainRecord(ctx, in, out)
}

func (h *walletHandler) PageIssueChainRecord(ctx context.Context, in *PageChainRecordReq, out *PageChainRecordResp) error {
	return h.WalletHandler.PageIssueChainRecord(ctx, in, out)
}

func (h *walletHandler) PageRetireChainRecord(ctx context.Context, in *PageChainRecordReq, out *PageChainRecordResp) error {
	return h.WalletHandler.PageRetireChainRecord(ctx, in, out)
}

func (h *walletHandler) GetSupply(ctx context.Context, in *GetSupplyReq, out *GetSupplyRsp) error {
	return h.WalletHandler.GetSupply(ctx, in, out)
}

func (h *walletHandler) GetAccountBalance(ctx context.Context, in *GetAccountBalanceReq, out *GetAccountBalanceRsp) error {
	return h.WalletHandler.GetAccountBalance(ctx, in, out)
}
